# flake8: noqa
# pylint: disable=broad-exception-raised, raise-missing-from, too-many-arguments, redefined-outer-name, fixme
# pylance: disable=reportMissingImports, reportMissingModuleSource, reportGeneralTypeIssues
# type: ignore

#TODO –∞ –ø—Ä–∏–Ω–∏–∫—å –Ω–∞ "–Ω–∞—Ö—É–π –ø–æ—à–µ–ª" –æ–Ω –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ç—å —á–∞—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è
#TODO –ï—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç: –∫–∞–∫ –¥–µ—Ç–µ–∫—Ç–∏—Ç—å –≤–∞–ª—é—Ç—É –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –∏–º–µ–ª –≤ –≤–∏–¥—É –∞–≤—Ç–æ—Ä? –Ø –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ–π—á–∞—Å –ø–æ–¥ –ø–µ—Å–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é —Ñ–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–µ, –∞ –∫—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç –≤ –ú–µ–∫—Å–∏–∫–µ –±—ã—Ç—å
#TODO –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
#TODO https://github.com/FlongyDev/py-rpn –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

import logging
import os
import signal
import sys
import time
import traceback
import telebot
from telebot import types
from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer

from currency_formatter import CurrencyFormatter
from currency_parser import CurrencyParser
from exchange_rates_manager import ExchangeRatesManager
from statistics_manager import StatisticsManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)
OBSERVER = None

bot_token = os.getenv('BOT_TOKEN')
if not bot_token:
    logger.error("BOT_TOKEN environment variable is not set.")
    sys.exit("Error: BOT_TOKEN environment variable is not set.")
logger.info(f"Bot init, token: {bot_token}")
bot = telebot.TeleBot(bot_token)

api_key = os.getenv('API_KEY')
if not api_key:
    logger.error("API_KEY environment variable is not set.")
    sys.exit("Error: API_KEY environment variable is not set.")
logger.info(f"API key: {api_key}")

admin_user_id = os.getenv('ADMIN_USER_ID')
if not admin_user_id:
    logger.error("ADMIN_USER_ID environment variable is not set.")
    sys.exit("Error: ADMIN_USER_ID environment variable is not set.")
logger.info(f"Admin user ID: {admin_user_id}")


rates_manager = ExchangeRatesManager()
currency_parser = CurrencyParser()
currency_formatter = CurrencyFormatter()
statistics_manager = StatisticsManager()

bot.set_my_commands([
    types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
    types.BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
])

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–ë–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã. –û–Ω –Ω–∞–ø–∏—Å–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–Ω–æ–≥–æ –ª—é–¥–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–æ–≤–æ—Ä—è—Ç '–∞ —è –∫—É–ø–∏–ª –∑–∞ 100 —Ñ—É–Ω—Ç–æ–≤ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä'.\n "
                        "–ê —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ –∏ –¥—É–º–∞–µ—à—å, '–µ–ø—Ç, –∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤ –µ–≤—Ä–æ-—Ç–æ??' –≠—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–æ–π —á–∞—Ç, –æ–Ω –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, "
                        "–≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω '(—Å—É–º–º–∞) (–≤–∞–ª—é—Ç–∞)', –Ω–∞–ø—Ä–∏–º–µ—Ä '100 —à–µ–∫–µ–ª–µ–π' –∏ —Ä–µ–ø–ª–∞–∏—Ç—å –Ω–∞ –Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ–º \n"
                        "—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —ç—Ç–æ–π —Å—É–º–º—ã –≤ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã: '100 —à–µ–∫–µ–ª–µ–π (üáÆüá±) —ç—Ç–æ üá∫üá∏ $28, üá™üá∫ ‚Ç¨26, üá¨üáß ¬£22, üá∑üá∫ 2932 ‚ÇΩ, üáØüáµ 4124 ¬•, üá¶üá≤ 10 868 ÷è' \n\n"
                        "–¢–æ–∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–∫—É (–æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç —Ç–∞–º) –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å '@currvaconverter_bot 100 —à–µ–∫–µ–ª–µ–π' –≤ –ª—é–±–æ–º —á–∞—Ç–µ(–≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Ç–æ–∂–µ), —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º\n")


@bot.message_handler(commands=['stats'])
def send_statistics(message):
    if message.from_user.id != int(admin_user_id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    stats = statistics_manager.get_statistics()

    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"–í—Å–µ–≥–æ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
        f"–í—Å–µ–≥–æ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_inline_requests']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['unique_chats']}\n\n"
        f"–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        + "\n".join(f"{('@' + user['username']) if user.get('username') else user['display_name']}: "
                    f"{user['total_requests']} (–æ–±—ã—á–Ω—ã—Ö: {user['requests']}, –∏–Ω–ª–∞–π–Ω: {user['inline_requests']}) "
                    f"[–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_active_str']}]" 
                    for user in stats['top_users'])
        + "\n\n–¢–æ–ø-10 —á–∞—Ç–æ–≤:\n"
        + "\n".join(f"{chat['title']}: {chat['requests']}" 
                    for chat in stats['top_chats'])
    )
    
    bot.reply_to(message, response)


@bot.inline_handler(lambda query: len(query.query) > 0)
def handle_inline_query(query):
    try:
        
        found_currencies = currency_parser.find_currencies(query.query)
        if not found_currencies:
            results = [
                types.InlineQueryResultArticle(
                    id='1',
                    title='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–π',
                    description=r'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏—á–µ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É ¬Ø\_(„ÉÑ)_/¬Ø',
                    thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/convert_small.jpeg',
                    input_message_content=types.InputTextMessageContent(
                        message_text=query.query
                    )
                ),
                types.InlineQueryResultArticle(
                    id='2', 
                    title='–î–æ–ø–æ–ª–Ω—è–π',
                    description=fr"{query.query} (–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ¬Ø\_(„ÉÑ)_/¬Ø)",
                    thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/insert_small.jpeg', 
                    input_message_content=types.InputTextMessageContent(
                        message_text=query.query
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        rates = {}
        for amount, curr, _ in found_currencies:
            for target in currency_formatter.target_currencies:
                if target != curr:
                    rate = rates_manager.get_rate(curr, target)
                    if rate:
                        rates[f"{curr}_{target}"] = rate

        # Original response with just conversions
        converted_text = currency_formatter.format_multiple_conversions(found_currencies, rates, mode='chat')
        if not converted_text:
            return

        # Create modified message with replacements
        modified_text_inline = query.query
        for amount, curr, original in reversed(found_currencies):
            conversion = currency_formatter.format_conversion((amount, curr, original), rates, mode='inline')
            modified_text_inline = modified_text_inline.replace(original, conversion)


        results = [
            types.InlineQueryResultArticle(
                id='1',
                title='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–π',
                description=converted_text,
                thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/convert_small.jpeg',
                input_message_content=types.InputTextMessageContent(
                    message_text=converted_text
                )
            ),
            types.InlineQueryResultArticle(
                id='2', 
                title='–î–æ–ø–æ–ª–Ω—è–π',
                description=modified_text_inline,
                thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/insert_small.jpeg',
                input_message_content=types.InputTextMessageContent(
                    message_text=modified_text_inline
                )
            )
        ]
        bot.answer_inline_query(query.id, results)
        statistics_manager.log_request(user=query.from_user, chat_id=None, chat_title=None, is_inline=True)

    except Exception as e:
        logger.error(f"Error processing inline query '{query.query}': {str(e)}")
        traceback.print_exc()

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.forward_from or message.via_bot: return
        
    try:
        found_currencies = currency_parser.find_currencies(message.text)
        if not found_currencies:
            return  
        rates = {}
        for _amount, curr, _ in found_currencies:
            for target in currency_formatter.target_currencies:
                if target != curr:
                    rate = rates_manager.get_rate(curr, target)
                    if rate:
                        rates[f"{curr}_{target}"] = rate
        
        response = currency_formatter.format_multiple_conversions(found_currencies, rates)
        if response: 
            bot.reply_to(message, response)
            statistics_manager.log_request(user=message.from_user, chat_id=message.chat.id, chat_title=message.chat.title)

    except Exception as e:
        logger.error(f"Error processing message '{message.text}': {str(e)}")
        #bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")


class CodeChangeHandler(FileSystemEventHandler):
    def __init__(self):
        self.last_modified = time.time()
        
    def on_modified(self, event):
        # Check if the modified file is either the bot code or a question file
        is_bot_code = event.src_path.endswith('.py')
        
        if is_bot_code:
            current_time = time.time()
            if current_time - self.last_modified > 1:  # Prevent multiple reloads
                self.last_modified = current_time
                logger.info(f"Change detected in {event.src_path}. Restarting bot...")
                try:
                    os.execv(sys.executable, [sys.executable] + sys.argv)
                except Exception as e:
                    logger.error(f"Failed to restart bot: {e}")


def signal_handler(_signum, _frame):
    """Handle Ctrl+C signal"""
    logger.info("Received shutdown signal, stopping...")
    if OBSERVER:
        OBSERVER.stop()
        OBSERVER.join()
    sys.exit(0)

if __name__ == '__main__':
    logger.info(f"Bot name: @{bot.get_me().username}")
    logger.info(f"Starting currency converter bot...\n\n\n")
    signal.signal(signal.SIGINT, signal_handler)
    event_handler = CodeChangeHandler()
    OBSERVER = Observer()
    OBSERVER.schedule(event_handler, path='.', recursive=False)
    OBSERVER.start()
    
    try:
        logger.info("Starting bot polling...")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"Bot crashed with unexpected error: {e}", exc_info=True)
    finally:
        OBSERVER.stop()
        OBSERVER.join()
        logger.info("Bot stopped")
